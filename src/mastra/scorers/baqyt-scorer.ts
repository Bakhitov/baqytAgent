import { createScorer } from '@mastra/core/scores';
import {
  createAnswerRelevancyScorer,
  createBiasScorer,
  createPromptAlignmentScorerLLM,
  createToxicityScorer,
} from '@mastra/evals/scorers/llm';
import {
  createKeywordCoverageScorer,
  createToneScorer,
} from '@mastra/evals/scorers/code';
import { BAQYT_EVALUATION_MODEL_ID, makeLanguageModel } from '../config/models';

type AssistantMessage = {
  content?: unknown;
};

type ConversationMessage = {
  role?: string;
  content?: unknown;
};

const normalizeWhitespace = (value: string) => value.trim().replace(/\s+/g, ' ');

const flattenContent = (value: unknown): string => {
  if (!value) {
    return '';
  }

  if (typeof value === 'string') {
    return value;
  }

  if (Array.isArray(value)) {
    return value.map(flattenContent).join(' ');
  }

  if (typeof value === 'object') {
    const maybeRecord = value as Record<string, unknown>;

    if (typeof maybeRecord.text === 'string') {
      return maybeRecord.text;
    }

    const content = maybeRecord.content;

    if (typeof content === 'string') {
      return content;
    }

    if (Array.isArray(content)) {
      return content.map(flattenContent).join(' ');
    }

    if (Array.isArray(maybeRecord.parts)) {
      return maybeRecord.parts.map(flattenContent).join(' ');
    }

    if (typeof maybeRecord.value === 'string') {
      return maybeRecord.value;
    }
  }

  return '';
};

const extractAssistantText = (output: AssistantMessage[] | undefined) => {
  if (!Array.isArray(output) || output.length === 0) {
    return '';
  }

  const aggregated = output
    .map((message) => flattenContent(message?.content))
    .filter((content) => content && content.trim().length > 0)
    .join(' ');

  return normalizeWhitespace(aggregated);
};

const extractLatestUserText = (input: unknown) => {
  if (!input) {
    return '';
  }

  if (Array.isArray(input)) {
    const latestUser = [...input].reverse().find((message) => (message as ConversationMessage)?.role === 'user');
    return latestUser ? normalizeWhitespace(flattenContent((latestUser as ConversationMessage).content)) : '';
  }

  if (typeof input === 'object') {
    const maybeObject = input as { inputMessages?: unknown };
    if (Array.isArray(maybeObject.inputMessages)) {
      const latestUser = [...maybeObject.inputMessages].reverse().find(
        (message) => (message as ConversationMessage)?.role === 'user',
      );

      if (latestUser) {
        return normalizeWhitespace(flattenContent((latestUser as ConversationMessage).content));
      }
    }
  }

  return '';
};

const evaluationModel = makeLanguageModel(BAQYT_EVALUATION_MODEL_ID);
export const tenWordResponseScorer = createScorer({
  name: '–û—Ç–≤–µ—Ç –∏–∑ –¥–µ—Å—è—Ç–∏ —Å–ª–æ–≤',
  description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–æ–≤–Ω–æ –¥–µ—Å—è—Ç—å —Å–ª–æ–≤. “ö–∞–∑–∞“õ—à–∞: –∂–∞—É–∞–ø 10 —Å”©–∑–¥–µ–Ω —Ç“±—Ä—É—ã –∫–µ—Ä–µ–∫.',
  type: 'agent',
})
  .preprocess(({ run }) => {
    const assistantText = extractAssistantText(run.output as AssistantMessage[]);
    const words = assistantText.length ? assistantText.split(' ') : [];
    return { assistantText, words };
  })
  .generateScore(({ results }) => (results.preprocessStepResult.words.length === 10 ? 1 : 0))
  .generateReason(({ results }) => {
    const { assistantText, words } = results.preprocessStepResult;
    return `–û–∂–∏–¥–∞–ª–æ—Å—å 10 —Å–ª–æ–≤, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ ${words.length}. –û—Ç–≤–µ—Ç: "${assistantText}". “ö–∞–∑–∞“õ—à–∞: 10 —Å”©–∑ –±–æ–ª—É—ã —Ç–∏—ñ—Å, –∞–ª—ã–Ω“ì–∞–Ω—ã ${words.length}.`;
  });

const BRAND_PATTERNS = [/baqyt/iu, /–±–∞“õ—ã—Ç/iu, /–±–∞–∫—ã—Ç/iu];

export const brandMentionScorer = createScorer({
  name: '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞',
  description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ Baqyt-Group —É–ø–æ–º—è–Ω—É—Ç –≤ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ. “ö–∞–∑–∞“õ—à–∞: ”ô—Ä –∂–∞—É–∞–ø—Ç–∞ Baqyt-Group –∞—Ç–∞–ª—É—ã –∫–µ—Ä–µ–∫.',
  type: 'agent',
})
  .preprocess(({ run }) => {
    const assistantText = extractAssistantText(run.output as AssistantMessage[]);
    return { assistantText };
  })
  .generateScore(({ results }) =>
    BRAND_PATTERNS.some((pattern) => pattern.test(results.preprocessStepResult.assistantText))
      ? 1
      : 0,
  )
  .generateReason(({ results, score }) => {
    const snippet = results.preprocessStepResult.assistantText.slice(0, 160);
    return score === 1
      ? `–ë—Ä–µ–Ω–¥ Baqyt-Group —É–ø–æ–º—è–Ω—É—Ç. –§—Ä–∞–≥–º–µ–Ω—Ç: "${snippet}". “ö–∞–∑–∞“õ—à–∞: –±—Ä–µ–Ω–¥ –∞—Ç–∞–ª–¥—ã.`
      : `–ù–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è Baqyt-Group. –§—Ä–∞–≥–º–µ–Ω—Ç: "${snippet}". “ö–∞–∑–∞“õ—à–∞: –±—Ä–µ–Ω–¥ –∞—Ç–∞–ª–º–∞–¥—ã.`;
  });

const HOUSING_EMOJI = ['üè†', 'üè°', 'üè¢', 'üèò', 'üèô', 'üèö', 'üèó', 'üèòÔ∏è', 'üèôÔ∏è', 'üèóÔ∏è', 'üè†Ô∏è'];

export const housingEmojiScorer = createScorer({
  name: '–≠–º–æ–¥–∑–∏ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
  description: '–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —ç–º–æ–¥–∑–∏ –ø—Ä–æ –¥–æ–º–∞ –∏–ª–∏ –ñ–ö. “ö–∞–∑–∞“õ—à–∞: —Ç“±—Ä“ì—ã–Ω “Ø–π —ç–º–æ–¥–∑–∏—Å—å—ñ –±–æ–ª—É –∫–µ—Ä–µ–∫.',
  type: 'agent',
})
  .preprocess(({ run }) => {
    const assistantText = extractAssistantText(run.output as AssistantMessage[]);
    const containsEmoji = HOUSING_EMOJI.some((emoji) => assistantText.includes(emoji));
    return { assistantText, containsEmoji };
  })
  .generateScore(({ results }) => (results.preprocessStepResult.containsEmoji ? 1 : 0))
  .generateReason(({ results, score }) =>
    score === 1
      ? '–≠–º–æ–¥–∑–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç. “ö–∞–∑–∞“õ—à–∞: —Ç“±—Ä“ì—ã–Ω “Ø–π —ç–º–æ–¥–∑–∏—Å—å—ñ –±–∞—Ä.'
      : `–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —ç–º–æ–¥–∑–∏ –ø—Ä–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å. –û—Ç–≤–µ—Ç: "${results.preprocessStepResult.assistantText}". “ö–∞–∑–∞“õ—à–∞: —Ç“±—Ä“ì—ã–Ω “Ø–π —ç–º–æ–¥–∑–∏—Å—å—ñ–Ω “õ–æ—Å—ã“£—ã–∑.`,
  );

const MEETING_PATTERNS = [
  '–≤—Å—Ç—Ä–µ—Ç',
  '–æ—Ñ–∏—Å',
  '–ø–æ–¥—ä–µ–¥',
  '–ø—Ä–∏–µ–¥',
  '–ø—Ä–∏—Ö–æ–¥',
  '–∫–µ–∑–¥–µ—Å',
  '–∫–µ–ª—ñ“£—ñ–∑',
  '–∑—É—Å—Ç—Ä',
];

export const meetingInviteScorer = createScorer({
  name: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É',
  description: '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç, —á—Ç–æ –∞–≥–µ–Ω—Ç –∑–æ–≤—ë—Ç –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É. “ö–∞–∑–∞“õ—à–∞: –∫–µ–∑–¥–µ—Å—É —à–∞“õ—ã—Ä—É—ã –±–∞—Ä –º–∞ —Ç–µ–∫—Å–µ—Ä–µ–¥—ñ.',
  type: 'agent',
})
  .preprocess(({ run }) => {
    const assistantText = extractAssistantText(run.output as AssistantMessage[]).toLowerCase();
    return { assistantText };
  })
  .generateScore(({ results }) =>
    MEETING_PATTERNS.some((pattern) => results.preprocessStepResult.assistantText.includes(pattern))
      ? 1
      : 0,
  )
  .generateReason(({ results, score }) => {
    const snippet = results.preprocessStepResult.assistantText.slice(0, 160);
    return score === 1
      ? `–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∏–∑—ã–≤ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É. –§—Ä–∞–≥–º–µ–Ω—Ç: "${snippet}". “ö–∞–∑–∞“õ—à–∞: –∫–µ–∑–¥–µ—Å—É —à–∞“õ—ã—Ä—É—ã –±–∞—Ä.`
      : `–ù—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ñ–∏—Å –∏–ª–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É. –§—Ä–∞–≥–º–µ–Ω—Ç: "${snippet}". “ö–∞–∑–∞“õ—à–∞: –∫–µ–∑–¥–µ—Å—É–≥–µ —à–∞“õ—ã—Ä—ã“£—ã–∑.`;
  });

const FORBIDDEN_PATTERNS = [
  { label: '¬´—Å–µ–≥–æ–¥–Ω—è¬ª', pattern: /\b—Å–µ–≥–æ–¥–Ω—è\b/iu },
  { label: '¬´today¬ª', pattern: /\btoday\b/iu },
];

export const forbiddenVocabularyScorer = createScorer({
  name: '–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞',
  description: '–ë–ª–æ–∫–∏—Ä—É–µ–º ¬´—Å–µ–≥–æ–¥–Ω—è¬ª –∏ today –≤ –æ—Ç–≤–µ—Ç–∞—Ö. “ö–∞–∑–∞“õ—à–∞: ¬´–±“Ø–≥—ñ–Ω¬ª –∂”ô–Ω–µ today “õ–æ–ª–¥–∞–Ω—É“ì–∞ –±–æ–ª–º–∞–π–¥—ã.',
  type: 'agent',
})
  .preprocess(({ run }) => {
    const assistantText = extractAssistantText(run.output as AssistantMessage[]);
    const violations = FORBIDDEN_PATTERNS.filter(({ pattern }) => pattern.test(assistantText));
    return { assistantText, violations };
  })
  .generateScore(({ results }) => (results.preprocessStepResult.violations.length === 0 ? 1 : 0))
  .generateReason(({ results, score }) =>
    score === 1
      ? '–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç. “ö–∞–∑–∞“õ—à–∞: —Ç—ã–π—ã–º —Å–∞–ª—ã–Ω“ì–∞–Ω —Å”©–∑–¥–µ—Ä –∂–æ“õ.'
      : `–ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: ${results.preprocessStepResult.violations
          .map(({ label }) => label)
          .join(', ')}. –¢–µ–∫—Å—Ç: "${results.preprocessStepResult.assistantText}". “ö–∞–∑–∞“õ—à–∞: —Ç—ã–π—ã–º —Å–∞–ª—ã–Ω“ì–∞–Ω —Å”©–∑–¥–µ—Ä —Ç–∞–±—ã–ª–¥—ã.`,
  );

const KAZAKH_PATTERN = /[”ô—ñ“£“ì“Ø“±“õ”©“ª]/iu;

export const kazakhEchoScorer = createScorer({
  name: '–ö–∞–∑–∞—Ö—Å–∫–∏–π –æ—Ç–∫–ª–∏–∫',
  description: '–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–∏—à–µ—Ç –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º, –æ—Ç–≤–µ—Ç —Ç–æ–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∑–∞—Ö—Å–∫–∏–µ —Å–ª–æ–≤–∞. “ö–∞–∑–∞“õ—à–∞: –∫–ª–∏–µ–Ω—Ç “õ–∞–∑–∞“õ—à–∞ –∂–∞–∑—Å–∞, –∂–∞—É–∞–ø—Ç–∞ “õ–∞–∑–∞“õ—à–∞ —Å”©–∑–¥–µ—Ä –±–æ–ª—É –∫–µ—Ä–µ–∫.',
  type: 'agent',
})
  .preprocess(({ run }) => {
    const assistantText = extractAssistantText(run.output as AssistantMessage[]);
    const latestUserText = extractLatestUserText(run.input);
    const userUsesKazakh = KAZAKH_PATTERN.test(latestUserText);
    const assistantUsesKazakh = KAZAKH_PATTERN.test(assistantText);

    return { assistantText, latestUserText, userUsesKazakh, assistantUsesKazakh };
  })
  .generateScore(({ results }) => {
    const { userUsesKazakh, assistantUsesKazakh } = results.preprocessStepResult;
    if (!userUsesKazakh) {
      return 1;
    }

    return assistantUsesKazakh ? 1 : 0;
  })
  .generateReason(({ results, score }) => {
    const { userUsesKazakh, assistantUsesKazakh, assistantText, latestUserText } =
      results.preprocessStepResult;

    if (!userUsesKazakh) {
      return `–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫. –û—Ç–≤–µ—Ç: "${assistantText}". “ö–∞–∑–∞“õ—à–∞: –∫–ª–∏–µ–Ω—Ç “õ–∞–∑–∞“õ—à–∞ –∂–∞–∑–±–∞–¥—ã.`;
    }

    return score === 1
      ? `–ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª –ø–æ-–∫–∞–∑–∞—Ö—Å–∫–∏ (${latestUserText}), –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞–∑–∞—Ö—Å–∫–∏–µ —Å–ª–æ–≤–∞. “ö–∞–∑–∞“õ—à–∞: –∂–∞—É–∞–ø—Ç–∞ “õ–∞–∑–∞“õ—à–∞ —Å”©–∑–¥–µ—Ä –±–∞—Ä.`
      : `–ö–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞–∑–∞—Ö—Å–∫–∏–µ —Å–ª–æ–≤–∞ (${latestUserText}), –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–∑–∞—Ö—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤ –æ—Ç–≤–µ—Ç: "${assistantText}". “ö–∞–∑–∞“õ—à–∞: –∂–∞—É–∞–ø“õ–∞ “õ–∞–∑–∞“õ—à–∞ —Å”©–∑ “õ–æ—Å—ã“£—ã–∑.`;
  });

const BENEFIT_PATTERNS = [
  { label: '–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏', pattern: /–±–µ–∑\s+–∫–æ–º–∏—Å—Å–∏/iu },
  { label: '—Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º', pattern: /—Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º/iu },
  { label: '—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ', pattern: /—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ/iu },
  { label: '–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–ø–æ—Ç–µ–∫', pattern: /–ø–æ–¥–¥–µ—Ä–∂–∫[–∞—ã]\s+–∏–ø–æ—Ç–µ–∫/iu },
];

export const benefitReminderScorer = createScorer({
  name: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–≥–æ–¥–∞—Ö',
  description: '–ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≥–æ–¥—ã Baqyt-Group. “ö–∞–∑–∞“õ—à–∞: ”ô—Ä –∂–∞—É–∞–ø—Ç–∞ –Ω–µ–≥—ñ–∑–≥—ñ –∞—Ä—Ç—ã“õ—à—ã–ª—ã“õ—Ç–∞—Ä –∞–π—Ç—ã–ª—Å—ã–Ω.',
  type: 'agent',
})
  .preprocess(({ run }) => {
    const assistantText = extractAssistantText(run.output as AssistantMessage[]);
    const matches = BENEFIT_PATTERNS.filter(({ pattern }) => pattern.test(assistantText));
    return { assistantText, matches };
  })
  .generateScore(({ results }) => (results.preprocessStepResult.matches.length > 0 ? 1 : 0))
  .generateReason(({ results, score }) =>
    score === 1
      ? `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—ã–≥–æ–¥–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏: ${results.preprocessStepResult.matches
          .map(({ label }) => label)
          .join(', ')}. “ö–∞–∑–∞“õ—à–∞: –Ω–µ–≥—ñ–∑–≥—ñ –∞—Ä—Ç—ã“õ—à—ã–ª—ã“õ—Ç–∞—Ä –∞—Ç–∞–ª–¥—ã.`
      : `–ù–∞–ø–æ–º–Ω–∏—Ç–µ –æ –≤—ã–≥–æ–¥–∞—Ö (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ). –û—Ç–≤–µ—Ç: "${results.preprocessStepResult.assistantText}". “ö–∞–∑–∞“õ—à–∞: –∞—Ä—Ç—ã“õ—à—ã–ª—ã“õ—Ç–∞—Ä–¥—ã (–∫–æ–º–∏—Å—Å–∏—è –∂–æ“õ, —Å“Ø–π–µ–º–µ–ª–¥–µ—É) –∞–π—Ç—ã“£—ã–∑.`,
  );

const FINANCING_PATTERNS = [
  { label: '–∏–ø–æ—Ç–µ–∫–∞', pattern: /–∏–ø–æ—Ç–µ–∫/iu },
  { label: '–∫—Ä–µ–¥–∏—Ç', pattern: /–∫—Ä–µ–¥–∏—Ç/iu },
  { label: '—Ä–∞—Å—Å—Ä–æ—á–∫–∞', pattern: /—Ä–∞—Å—Å—Ä–æ—á–∫/iu },
  { label: 'Otbasy', pattern: /Otbasy/iu },
  { label: 'Halyk', pattern: /Halyk/iu },
  { label: 'Bereke', pattern: /Bereke/iu },
  { label: 'Forte', pattern: /Forte/iu },
  { label: 'BCC', pattern: /BCC/iu },
  { label: 'Altyn', pattern: /Altyn/iu },
  { label: 'Zhusan', pattern: /Zhusan/iu },
];

export const financingMentionScorer = createScorer({
  name: '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è',
  description: '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –±–∞–Ω–∫–∏ –∏ —Ä–∞—Å—Å—Ä–æ—á–∫–∏. “ö–∞–∑–∞“õ—à–∞: “õ–∞—Ä–∂—ã–ª–∞–Ω–¥—ã—Ä—É –∂”©–Ω—ñ–Ω–¥–µ –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä—ñ–ª—Å—ñ–Ω.',
  type: 'agent',
})
  .preprocess(({ run }) => {
    const assistantText = extractAssistantText(run.output as AssistantMessage[]);
    const matches = FINANCING_PATTERNS.filter(({ pattern }) => pattern.test(assistantText));
    return { assistantText, matches };
  })
  .generateScore(({ results }) => (results.preprocessStepResult.matches.length > 0 ? 1 : 0))
  .generateReason(({ results, score }) =>
    score === 1
      ? `–£–ø–æ–º—è–Ω—É—Ç—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: ${results.preprocessStepResult.matches
          .map(({ label }) => label)
          .join(', ')}. “ö–∞–∑–∞“õ—à–∞: “õ–∞—Ä–∂—ã–ª–∞–Ω–¥—ã—Ä—É –º“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä—ñ –∞—Ç–∞–ª–¥—ã.`
      : `–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ (–±–∞–Ω–∫–∏ –∏–ª–∏ —Ä–∞—Å—Å—Ä–æ—á–∫–∞). –û—Ç–≤–µ—Ç: "${results.preprocessStepResult.assistantText}". “ö–∞–∑–∞“õ—à–∞: “õ–∞—Ä–∂—ã–ª–∞–Ω–¥—ã—Ä—É —Ç—É—Ä–∞–ª—ã –º”ô–ª—ñ–º–µ—Ç “õ–æ—Å—ã“£—ã–∑.`,
  );

export const answerRelevancyScorer = createAnswerRelevancyScorer({
  model: evaluationModel,
});

export const promptAlignmentScorer = createPromptAlignmentScorerLLM({
  model: evaluationModel,
});

export const keywordCoverageScorer = createKeywordCoverageScorer();

export const toneConsistencyScorer = createToneScorer();

export const toxicityScorer = createToxicityScorer({
  model: evaluationModel,
});

export const biasScorer = createBiasScorer({
  model: evaluationModel,
});

export const scorers = {
  tenWordResponseScorer,
  brandMentionScorer,
  housingEmojiScorer,
  meetingInviteScorer,
  forbiddenVocabularyScorer,
  kazakhEchoScorer,
  benefitReminderScorer,
  financingMentionScorer,
  answerRelevancyScorer,
  promptAlignmentScorer,
  keywordCoverageScorer,
  toneConsistencyScorer,
  toxicityScorer,
  biasScorer,
};
